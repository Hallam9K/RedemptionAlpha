using Redemption.NPCs.Critters;
using Redemption.Tags;
using System.Collections.Generic;
using Terraria.ID;
using Terraria.ModLoader;
using Group = Redemption.Tags.ProjectileTags;

namespace Redemption
{
    public static class TileLists
    {
        #region Tile Lists
        //if you want multiple seedbags to have the same native terrain add the list here so it's accesable by both and easily updateable
        public static List<int> CorruptTiles = new()
        {
            23,
            25,
            112,
            163,
            398,
            400
        };
        public static List<int> CrimsonTiles = new()
        {
            199,
            203,
            234,
            200,
            399,
            401,
            205
        };
        public static List<int> EvilTiles = new()
        {
            23,
            25,
            112,
            163,
            398,
            400,
            199,
            203,
            234,
            200,
            399,
            401,
            205
        };
        public static List<int> HallowTiles = new()
        {
            109,
            117,
            116,
            164,
            402,
            403,
            115
        };
        public static List<int> ForestTiles = new()
        {
            2
        };
        public static List<int> GloomTiles = new()
        {
            59,
            70,
            194,
        };
        public static List<int> GlowingMushTiles = new()
        {
            59,
            70,
            190
        };
        public static List<int> CloudTiles = new()
        {
            189,
            196,
            460
        };
        public static List<int> HellTiles = new()
        {
            57,
            198,
            58,
            76,
            75
        };
        public static List<int> SnowTiles = new()
        {
            161,
            206,
            164,
            200,
            163,
            162,
            147,
            148
        };
        public static List<int> DesertTiles = new()
        {
            53,
            396,
            397,
            403,
            402,
            401,
            399,
            400,
            398
        };
        public static List<int> JungleTiles = new()
        {
            59,
            120,
            60,
        };
        public static List<int> DirtTiles = new()
        {
            TileID.Dirt,
            59,
            40
        };
        public static List<int> OreTiles = new()
        {
            408,
            7,
            166,
            6,
            167,
            9,
            168,
            8,
            169,
            22,
            204,
            37,
            58,
            107,
            221,
            108,
            222,
            111,
            223,
            211,
            //ModContent.TileType<DragonLeadOreTile>(),
            //ModContent.TileType<KaniteOreTile>(),
            //ModContent.TileType<SapphironOreTile>(),
            //ModContent.TileType<ScarlionOreTile>(),
            //ModContent.TileType<StarliteOreTile>(),
            //ModContent.TileType<XenomiteOreBlock>()
        };
        public static List<int> HotTiles = new()
        {
            53,
            396,
            397,
            403,
            402,
            401,
            399,
            400,
            398,
            57,
            198,
            58,
            76,
            75
        };
        public static List<int> NatureTiles = new()
        {
            2,
            59,
            120,
            60
        }; public static List<int> WhitelistTiles = new()
        {
            TileID.BlueDungeonBrick,
            TileID.GreenDungeonBrick,
            TileID.PinkDungeonBrick,
            TileID.LihzahrdBrick,
            TileID.BeeHive
        };
        public static List<int> ModdedChests = new()
        {
            //ModContent.TileType<AncientWoodChestTile>(),
            //ModContent.TileType<DeadWoodChestTile>(),
            //ModContent.TileType<LabChestTile>(),
            //ModContent.TileType<LabChestTileLocked>(),
            //ModContent.TileType<LabChestTileLocked2>(),
            //ModContent.TileType<ShadeChestTile>(),
            //ModContent.TileType<SilverwoodChestTile>(),
            //ModContent.TileType<HolochestTile>()
        };
        #endregion
    }
    public static class NPCLists
    {
        #region NPC Lists
        public static List<int> IsBunny = new()
        {
            NPCID.Bunny,
            NPCID.GoldBunny,
            NPCID.BunnySlimed,
            NPCID.BunnyXmas,
            NPCID.PartyBunny
        };
        public static List<int> IsVanillaWeakSkeleton = new()
        {
            NPCID.ArmoredSkeleton,
            NPCID.BigHeadacheSkeleton,
            NPCID.BigMisassembledSkeleton,
            NPCID.BigPantlessSkeleton,
            NPCID.BigSkeleton,
            NPCID.BoneThrowingSkeleton,
            NPCID.BoneThrowingSkeleton2,
            NPCID.BoneThrowingSkeleton3,
            NPCID.BoneThrowingSkeleton4,
            NPCID.DD2SkeletonT1,
            NPCID.DD2SkeletonT3,
            NPCID.GreekSkeleton,
            NPCID.HeadacheSkeleton,
            NPCID.HeavySkeleton,
            NPCID.MisassembledSkeleton,
            NPCID.PantlessSkeleton,
            NPCID.Skeleton,
            NPCID.SkeletonAlien,
            NPCID.SkeletonArcher,
            NPCID.SkeletonAstonaut,
            NPCID.SkeletonCommando,
            NPCID.SkeletonSniper,
            NPCID.SkeletonTopHat,
            NPCID.SmallHeadacheSkeleton,
            NPCID.SmallMisassembledSkeleton,
            NPCID.SmallPantlessSkeleton,
            NPCID.SmallSkeleton,
            NPCID.TacticalSkeleton,
            NPCID.AngryBones,
            NPCID.AngryBonesBig,
            NPCID.AngryBonesBigHelmet,
            NPCID.AngryBonesBigMuscle,
            NPCID.BoneSerpentHead,
            NPCID.BoneSerpentBody,
            NPCID.BoneSerpentTail,
            NPCID.DarkCaster,
            NPCID.CursedSkull,
            NPCID.UndeadMiner,
            NPCID.UndeadViking,
            NPCID.ArmoredViking,
            NPCID.BlueArmoredBones,
            NPCID.BlueArmoredBonesMace,
            NPCID.BlueArmoredBonesNoPants,
            NPCID.BlueArmoredBonesSword,
            NPCID.BoneLee,
            NPCID.DiabolistRed,
            NPCID.DiabolistWhite,
            NPCID.GiantCursedSkull,
            NPCID.HellArmoredBones,
            NPCID.HellArmoredBonesMace,
            NPCID.HellArmoredBonesSpikeShield,
            NPCID.HellArmoredBonesSword,
            NPCID.Necromancer,
            NPCID.NecromancerArmored,
            NPCID.RaggedCaster,
            NPCID.RaggedCasterOpenCoat,
            NPCID.RuneWizard,
            NPCID.RustyArmoredBonesAxe,
            NPCID.RustyArmoredBonesFlail,
            NPCID.RustyArmoredBonesSword,
            NPCID.RustyArmoredBonesSwordNoArmor
        };
        /*public static List<int> IsInfected = new()
        {
            ModContent.NPCType<HazmatSkeleton>(),
            ModContent.NPCType<HazmatZombie>(),
            ModContent.NPCType<InfectedCaveBat>(),
            ModContent.NPCType<InfectedDemonEye>(),
            ModContent.NPCType<InfectedDiggerHead>(),
            ModContent.NPCType<InfectedDiggerBody>(),
            ModContent.NPCType<InfectedDiggerTail>(),
            ModContent.NPCType<InfectedGiantBat>(),
            ModContent.NPCType<InfectedGiantWormBody>(),
            ModContent.NPCType<InfectedGiantWormHead>(),
            ModContent.NPCType<InfectedGiantWormTail>(),
            ModContent.NPCType<InfectedGiantWormTail>(),
            ModContent.NPCType<InfectedZombie>(),
            ModContent.NPCType<SludgyBoi>(),
            ModContent.NPCType<XenoChomper>(),
            ModContent.NPCType<XenomiteGargantuan>(),
            ModContent.NPCType<XenomiteGolem>(),
            ModContent.NPCType<XenonRoller>(),
            ModContent.NPCType<RadiumDiggerBody>(),
            ModContent.NPCType<RadiumDiggerTail>(),
            ModContent.NPCType<RadiumDiggerHead>(),
            ModContent.NPCType<Blisterling>(),
            ModContent.NPCType<Blisterling2>(),
            ModContent.NPCType<InfectionHive>(),
            ModContent.NPCType<SludgyBlob>(),
            ModContent.NPCType<SludgyBoi2>(),
            ModContent.NPCType<Stage2Scientist>(),
            ModContent.NPCType<WalterInfected>(),
            ModContent.NPCType<XenoChomper2>(),
            ModContent.NPCType<XenomiteBeast>(),
            ModContent.NPCType<SpikyRadioactiveSlime>(),
            ModContent.NPCType<SneezyInfectedFlinx>(),
            ModContent.NPCType<RadiumRampager>(),
            ModContent.NPCType<RadiumDigger2Tail>(),
            ModContent.NPCType<RadiumDigger2Head>(),
            ModContent.NPCType<RadiumDigger2Body>(),
            ModContent.NPCType<RadioactiveSlime>(),
            ModContent.NPCType<NuclearSlime>(),
            ModContent.NPCType<InfectedSwarmer>(),
            ModContent.NPCType<InfectedSnowFlinx>(),
            ModContent.NPCType<InfectedChicken>(),
            ModContent.NPCType<GreenPigron>(),
            ModContent.NPCType<DecayedGhoul>(),
            ModContent.NPCType<BobTheBlob>(),
            ModContent.NPCType<Injector>(),
            ModContent.NPCType<BileBoomer>(),
            ModContent.NPCType<Injector>(),
            ModContent.NPCType<IrradiatedSpear>(),
            ModContent.NPCType<VirusJelly>(),
            ModContent.NPCType<Superbug>(),
            ModContent.NPCType<BloatedFaceMonster>(),
            ModContent.NPCType<BloatedGoldfish>(),
            ModContent.NPCType<IrradiatedWorldFeederTail>(),
            ModContent.NPCType<IrradiatedWorldFeederHead>(),
            ModContent.NPCType<IrradiatedWorldFeederBody>(),
            ModContent.NPCType<NerveParasite>(),
            ModContent.NPCType<RadioactiveSlimer>(),
            ModContent.NPCType<Xenoling>(),
            ModContent.NPCType<Superbug2>(),
            ModContent.NPCType<Blisterface2>(),
            ModContent.NPCType<IrradiatedBehemoth2>(),
            ModContent.NPCType<PZ2BodyCover>(),
            ModContent.NPCType<PZ2Fight>(),
            ModContent.NPCType<Stage3Scientist2>(),
            ModContent.NPCType<SeedGrowth>(),
            ModContent.NPCType<SoI>()
        };*/
        public static List<int> IsGhostly = new()
        {
            NPCID.EnchantedSword,
            NPCID.CrimsonAxe,
            NPCID.CursedHammer,
            NPCID.DesertDjinn,
            NPCID.DungeonSpirit,
            NPCID.FloatyGross,
            NPCID.Ghost,
            NPCID.PossessedArmor,
            NPCID.Wraith,
            NPCID.Reaper,
            NPCID.Poltergeist,
            /*ModContent.NPCType<TheKeeper>(),
            ModContent.NPCType<AAAA>(),
            ModContent.NPCType<DarkSoul>(),
            ModContent.NPCType<DarkSoul2>(),
            ModContent.NPCType<DarkSoul3>(),
            ModContent.NPCType<SkullDigger>(),
            ModContent.NPCType<WanderingSoul>(),
            ModContent.NPCType<IrradiatedSpear>(),
            ModContent.NPCType<SoullessAssassin>(),
            ModContent.NPCType<SoullessDueller>(),
            ModContent.NPCType<SoullessWanderer>(),
            ModContent.NPCType<TheKeeper_Soulless>(),
            ModContent.NPCType<BileBoomer>(),
            ModContent.NPCType<Shadebug>(),
            ModContent.NPCType<LaughingMaskBig>(),
            ModContent.NPCType<LaughingMaskMedium>(),
            ModContent.NPCType<LaughingMaskSmall>(),
            ModContent.NPCType<MansionWraith>(),
            ModContent.NPCType<MansionWraith2>(),
            ModContent.NPCType<WardenIdle>(),
            ModContent.NPCType<SoullessMarionette_Doll>(),
            ModContent.NPCType<SoullessMarionette_Cross>(),
            ModContent.NPCType<LaughingMaskSmall>(),
            ModContent.NPCType<LaughingMaskSmall>(),
            ModContent.NPCType<LaughingMaskSmall>(),
            ModContent.NPCType<LaughingMaskSmall>(),
            ModContent.NPCType<LaughingMaskSmall>()*/
        };
        public static List<int> IsDragonlike = new()
        {
            NPCID.DD2Betsy,
            NPCID.DD2WyvernT1,
            NPCID.DD2WyvernT2,
            NPCID.DD2WyvernT3,
            NPCID.PigronCorruption,
            NPCID.PigronCrimson,
            NPCID.PigronHallow,
            NPCID.DukeFishron,
            //ModContent.NPCType<GreenPigron>(),
            NPCID.WyvernHead,
            NPCID.WyvernBody,
            NPCID.WyvernBody2,
            NPCID.WyvernBody3,
            NPCID.WyvernLegs,
            NPCID.WyvernTail,
            NPCID.CultistDragonHead,
            NPCID.CultistDragonBody1,
            NPCID.CultistDragonBody2,
            NPCID.CultistDragonBody3,
            NPCID.CultistDragonBody4,
            NPCID.CultistDragonTail
        };
        public static List<int> IsDemon = new()
        {
            NPCID.Demon,
            NPCID.VoodooDemon,
            NPCID.FireImp,
            NPCID.RedDevil
        };
        /*public static List<int> IsSoulless = new()
        {
            ModContent.NPCType<SoullessAssassin>(),
            ModContent.NPCType<SoullessDueller>(),
            ModContent.NPCType<SoullessWanderer>(),
            ModContent.NPCType<ShadesoulNPC>(),
            ModContent.NPCType<SmallShadesoulNPC>(),
            ModContent.NPCType<TheSoulless2>(),
            ModContent.NPCType<TheSoulless>(),
            ModContent.NPCType<Shadebug>(),
            ModContent.NPCType<SoullessMarionette_Cross>(),
            ModContent.NPCType<SoullessMarionette_Doll>(),
            ModContent.NPCType<LaughingMaskSmall>(),
            ModContent.NPCType<LaughingMaskMedium>(),
            ModContent.NPCType<LaughingMaskBig>(),
            ModContent.NPCType<TheKeeper_Soulless>(),
            ModContent.NPCType<MansionWraith>(),
            ModContent.NPCType<MansionWraith2>(),
            ModContent.NPCType<WardenIdle>()
        };
        public static List<int> IsBloodskull = new()
        {
            ModContent.NPCType<BloodSkeleton>(),
            ModContent.NPCType<BloodskullGhost>(),
            ModContent.NPCType<BloodSkullMonster>(),
            ModContent.NPCType<SpineTentacle_Large>(),
            ModContent.NPCType<SpineTentacle_Small>()
        };*/
        public static List<int> IsAnySkeleton = new()
        {
            NPCID.ArmoredSkeleton,
            NPCID.BigHeadacheSkeleton,
            NPCID.BigMisassembledSkeleton,
            NPCID.BigPantlessSkeleton,
            NPCID.BigSkeleton,
            NPCID.BoneThrowingSkeleton,
            NPCID.BoneThrowingSkeleton2,
            NPCID.BoneThrowingSkeleton3,
            NPCID.BoneThrowingSkeleton4,
            NPCID.DD2SkeletonT1,
            NPCID.DD2SkeletonT3,
            NPCID.GreekSkeleton,
            NPCID.HeadacheSkeleton,
            NPCID.HeavySkeleton,
            NPCID.MisassembledSkeleton,
            NPCID.PantlessSkeleton,
            NPCID.Skeleton,
            NPCID.SkeletonAlien,
            NPCID.SkeletonArcher,
            NPCID.SkeletonAstonaut,
            NPCID.SkeletonCommando,
            NPCID.SkeletonSniper,
            NPCID.SkeletonTopHat,
            NPCID.SmallHeadacheSkeleton,
            NPCID.SmallMisassembledSkeleton,
            NPCID.SmallPantlessSkeleton,
            NPCID.SmallSkeleton,
            NPCID.TacticalSkeleton,
            NPCID.AngryBones,
            NPCID.AngryBonesBig,
            NPCID.AngryBonesBigHelmet,
            NPCID.AngryBonesBigMuscle,
            NPCID.BoneSerpentHead,
            NPCID.BoneSerpentBody,
            NPCID.BoneSerpentTail,
            NPCID.DarkCaster,
            NPCID.CursedSkull,
            NPCID.UndeadMiner,
            NPCID.UndeadViking,
            NPCID.ArmoredViking,
            NPCID.BlueArmoredBones,
            NPCID.BlueArmoredBonesMace,
            NPCID.BlueArmoredBonesNoPants,
            NPCID.BlueArmoredBonesSword,
            NPCID.BoneLee,
            NPCID.DiabolistRed,
            NPCID.DiabolistWhite,
            NPCID.GiantCursedSkull,
            NPCID.HellArmoredBones,
            NPCID.HellArmoredBonesMace,
            NPCID.HellArmoredBonesSpikeShield,
            NPCID.HellArmoredBonesSword,
            NPCID.Necromancer,
            NPCID.NecromancerArmored,
            NPCID.RaggedCaster,
            NPCID.RaggedCasterOpenCoat,
            NPCID.RuneWizard,
            NPCID.RustyArmoredBonesAxe,
            NPCID.RustyArmoredBonesFlail,
            NPCID.RustyArmoredBonesSword,
            NPCID.RustyArmoredBonesSwordNoArmor,
            NPCID.DungeonGuardian,
            NPCID.SkeletronHead,
            NPCID.SkeletronHand,
            ModContent.NPCType<BoneSpider>()
        };
        #endregion
    }
    public static class ProjectileLists
    {
        #region Projectile Lists
        public static List<int> IsTechnicallyMelee = new()
        {
            ProjectileID.EnchantedBoomerang,
            ProjectileID.Flamarang,
            ProjectileID.BallOHurt,
            ProjectileID.BlueMoon,
            ProjectileID.ThornChakram,
            ProjectileID.Sunfury,
            ProjectileID.DarkLance,
            ProjectileID.Trident,
            ProjectileID.Spear,
            ProjectileID.WoodenBoomerang,
            ProjectileID.TheDaoofPow,
            ProjectileID.CobaltChainsaw,
            ProjectileID.CobaltDrill,
            ProjectileID.MythrilChainsaw,
            ProjectileID.MythrilDrill,
            ProjectileID.AdamantiteChainsaw,
            ProjectileID.AdamantiteDrill,
            ProjectileID.MythrilHalberd,
            ProjectileID.AdamantiteGlaive,
            ProjectileID.CobaltNaginata,
            ProjectileID.Gungnir,
            ProjectileID.LightDisc,
            ProjectileID.Hamdrax,
            ProjectileID.IceBoomerang,
            ProjectileID.MushroomSpear,
            ProjectileID.TheRottedFork,
            ProjectileID.TheMeatball,
            ProjectileID.PossessedHatchet,
            ProjectileID.PalladiumPike,
            ProjectileID.PalladiumDrill,
            ProjectileID.PalladiumChainsaw,
            ProjectileID.OrichalcumHalberd,
            ProjectileID.OrichalcumDrill,
            ProjectileID.OrichalcumChainsaw,
            ProjectileID.TitaniumTrident,
            ProjectileID.TitaniumDrill,
            ProjectileID.TitaniumChainsaw,
            ProjectileID.ChlorophytePartisan,
            ProjectileID.ChlorophyteDrill,
            ProjectileID.ChlorophyteChainsaw,
            ProjectileID.FlowerPow,
            ProjectileID.ChlorophyteJackhammer,
            ProjectileID.GolemFist,
            ProjectileID.PaladinsHammerFriendly,
            ProjectileID.BloodyMachete,
            ProjectileID.FruitcakeChakram,
            ProjectileID.NorthPoleWeapon,
            ProjectileID.ObsidianSwordfish,
            ProjectileID.Swordfish,
            ProjectileID.SawtoothShark,
            ProjectileID.Anchor,
            ProjectileID.Flairon,
            ProjectileID.ChainKnife,
            ProjectileID.ChainGuillotine,
            ProjectileID.ButchersChainsaw,
            ProjectileID.Code1,
            ProjectileID.WoodYoyo,
            ProjectileID.CorruptYoyo,
            ProjectileID.CrimsonYoyo,
            ProjectileID.JungleYoyo,
            ProjectileID.Cascade,
            ProjectileID.Chik,
            ProjectileID.Code2,
            ProjectileID.Rally,
            ProjectileID.Yelets,
            ProjectileID.RedsYoyo,
            ProjectileID.ValkyrieYoyo,
            ProjectileID.Amarok,
            ProjectileID.HelFire,
            ProjectileID.Kraken,
            ProjectileID.TheEyeOfCthulhu,
            ProjectileID.BlackCounterweight,
            ProjectileID.BlueCounterweight,
            ProjectileID.GreenCounterweight,
            ProjectileID.PurpleCounterweight,
            ProjectileID.RedCounterweight,
            ProjectileID.YellowCounterweight,
            ProjectileID.FormatC,
            ProjectileID.Gradient,
            ProjectileID.Valor,
            ProjectileID.MechanicWrench,
            ProjectileID.Arkhalis,
            ProjectileID.Terrarian,
            ProjectileID.SolarWhipSword,
            ProjectileID.MonkStaffT1,
            ProjectileID.MonkStaffT2,
            ProjectileID.MonkStaffT3,
            ProjectileID.MonkStaffT3_Alt,
            ProjectileID.ThunderSpear,
            ProjectileID.Terragrim,
            ProjectileID.DripplerFlail,
            ProjectileID.GladiusStab,
            ProjectileID.BlandWhip,
            ProjectileID.RulerStab,
            ProjectileID.SwordWhip,
            ProjectileID.MaceWhip,
            ProjectileID.ScytheWhip,
            ProjectileID.RulerStab,
            ProjectileID.BouncingShield,
            ProjectileID.Shroomerang,
            ProjectileID.JoustingLance,
            ProjectileID.ShadowJoustingLance,
            ProjectileID.HallowJoustingLance,
            ProjectileID.CombatWrench,
            ProjectileID.CoolWhip,
            ProjectileID.FireWhip,
            ProjectileID.ThornWhip,
            ProjectileID.RainbowWhip,
            ProjectileID.FinalFractal,
            ProjectileID.CopperShortswordStab,
            ProjectileID.TinShortswordStab,
            ProjectileID.IronShortswordStab,
            ProjectileID.LeadShortswordStab,
            ProjectileID.SilverShortswordStab,
            ProjectileID.TungstenShortswordStab,
            ProjectileID.GoldShortswordStab,
            ProjectileID.PlatinumShortswordStab,
            ProjectileID.Mace,
            ProjectileID.FlamingMace,
            ProjectileID.BoneWhip,
        };
        #endregion
    }
    public sealed class ProjTags
    {
        public static readonly TagData Arcane = ContentTags.Get<Group>(nameof(Arcane));
        public static readonly TagData Fire = ContentTags.Get<Group>(nameof(Fire));
        public static readonly TagData Water = ContentTags.Get<Group>(nameof(Water));
        public static readonly TagData Ice = ContentTags.Get<Group>(nameof(Ice));
        public static readonly TagData Earth = ContentTags.Get<Group>(nameof(Earth));
        public static readonly TagData Wind = ContentTags.Get<Group>(nameof(Wind));
        public static readonly TagData Thunder = ContentTags.Get<Group>(nameof(Thunder));
        public static readonly TagData Holy = ContentTags.Get<Group>(nameof(Holy));
        public static readonly TagData Shadow = ContentTags.Get<Group>(nameof(Shadow));
        public static readonly TagData Nature = ContentTags.Get<Group>(nameof(Nature));
        public static readonly TagData Poison = ContentTags.Get<Group>(nameof(Poison));
        public static readonly TagData Blood = ContentTags.Get<Group>(nameof(Blood));
        public static readonly TagData Psychic = ContentTags.Get<Group>(nameof(Psychic));
        public static readonly TagData Celestial = ContentTags.Get<Group>(nameof(Celestial));
    }
}
